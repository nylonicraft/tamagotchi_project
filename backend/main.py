from fastapi import FastAPI
from pydantic import BaseModel
import json
import os
import asyncio
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="./frontend"), name="static")

STATE_FILE = "state.json"

class TamagotchiState(BaseModel):
    hunger: int = 50
    happiness: int = 50

def load_state() -> TamagotchiState:
    if not os.path.exists(STATE_FILE):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω, —è–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        initial_state = TamagotchiState(hunger=50, happiness=50)
        save_state(initial_state)
        return initial_state

    with open(STATE_FILE, "r") as f:
        data = json.load(f)
    return TamagotchiState(**data)

def save_state(state: TamagotchiState):
    data_to_save = state.dict()
    print(f"Saving state: {data_to_save}")  # –î–æ–¥–∞–Ω–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    with open(STATE_FILE, "w") as f:
        json.dump(data_to_save, f)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —â–∞—Å—Ç—è —Ç–∞ —Å–∏—Ç–æ—Å—Ç—ñ
async def decrease_state():
    while True:
        state = load_state()
        state.hunger = max(state.hunger - 1, 0)  # –ú—ñ–Ω—ñ–º—É–º 0
        state.happiness = max(state.happiness - 1, 0)  # –ú—ñ–Ω—ñ–º—É–º 0
        save_state(state)
        print(f"Updated state: {state.dict()}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        await asyncio.sleep(60)  # –ó–º–µ–Ω—à–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(decrease_state())

@app.post("/feed", summary="–ù–∞–≥–æ–¥—É–≤–∞—Ç–∏ —Ç–∞–º–∞–≥–æ—á—ñ", description="–¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑–±—ñ–ª—å—à—É—î —Ä—ñ–≤–µ–Ω—å —Å–∏—Ç–æ—Å—Ç—ñ —Ç–∞–º–∞–≥–æ—á—ñ –Ω–∞ 10 (–º–∞–∫—Å–∏–º—É–º 100).")
def feed():
    state = load_state()
    print(state)
    state.hunger = min(state.hunger + 10, 100)  # –º–∞–∫—Å–∏–º—É–º 100
    save_state(state)
    return {"message": "–¢–∞–º–∞–≥–æ—á—ñ –Ω–∞–≥–æ–¥–æ–≤–∞–Ω–æ!", "state": state}

@app.post("/play", summary="–ü–æ–≥—Ä–∞—Ç–∏ –∑ —Ç–∞–º–∞–≥–æ—á—ñ", description="–¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –∑–±—ñ–ª—å—à—É—î —Ä—ñ–≤–µ–Ω—å —â–∞—Å—Ç—è —Ç–∞–º–∞–≥–æ—á—ñ –Ω–∞ 10 (–º–∞–∫—Å–∏–º—É–º 100).")
def play():
    state = load_state()
    state.happiness = min(state.happiness + 10, 100)
    save_state(state)
    return {"message": "–¢–∞–º–∞–≥–æ—á—ñ –ø–æ–≥—Ä–∞–≤!", "state": state}

@app.get("/status", summary="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω —Ç–∞–º–∞–≥–æ—á—ñ", description="–¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Ç–æ—Å—Ç—ñ —Ç–∞ —â–∞—Å—Ç—è —Ç–∞–º–∞–≥–æ—á—ñ.")
def status():
    state = load_state()
    return {"state": state}

@app.get("/feelings", summary="–ï–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞–º–∞–≥–æ—á—ñ", description="–¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è —Å–∏—Ç–æ—Å—Ç—ñ —Ç–∞ —â–∞—Å—Ç—è –≤–∏–∑–Ω–∞—á–∞—î –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞–º–∞–≥–æ—á—ñ.")
def feelings():
    state = load_state()
    
    if state.hunger < 30:
        return {"emotion": "–Ø –≥–æ–ª–æ–¥–Ω–∏–π! üò¢"}
    if state.happiness < 30:
        return {"emotion": "–ú–µ–Ω—ñ –Ω—É–¥–Ω–æ... üòû"}
    return {"emotion": "–Ø —â–∞—Å–ª–∏–≤–∏–π! üòä"}

@app.get("/", response_class=HTMLResponse, summary="–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞", description="–¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø–æ–≤–µ—Ä—Ç–∞—î HTML-—Ñ–∞–π–ª.")
def root():
    with open("./frontend/index.html", "r", encoding="utf-8") as f:
        html_content = f.read()
    return HTMLResponse(content=html_content)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
